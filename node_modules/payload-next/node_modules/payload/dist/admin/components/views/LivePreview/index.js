"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LivePreviewView", {
    enumerable: true,
    get: function() {
        return LivePreviewView;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _reacti18next = require("react-i18next");
const _getTranslation = require("../../../../utilities/getTranslation");
const _DocumentControls = require("../../elements/DocumentControls");
const _DocumentFields = require("../../elements/DocumentFields");
const _LeaveWithoutSaving = require("../../modals/LeaveWithoutSaving");
const _ActionsProvider = require("../../utilities/ActionsProvider");
const _Config = require("../../utilities/Config");
const _DocumentInfo = require("../../utilities/DocumentInfo");
const _Locale = require("../../utilities/Locale");
const _Meta = /*#__PURE__*/ _interop_require_default(require("../../utilities/Meta"));
const _SetStepNav = require("../collections/Edit/SetStepNav");
const _Context = require("./Context");
const _context = require("./Context/context");
const _Preview = require("./Preview");
require("./index.scss");
const _usePopupWindow = require("./usePopupWindow");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const baseClass = 'live-preview';
const PreviewView = (props)=>{
    const { i18n, t } = (0, _reacti18next.useTranslation)('general');
    const { previewWindowType } = (0, _context.useLivePreviewContext)();
    const { apiURL, data, fieldTypes, permissions } = props;
    let collection;
    let global;
    let disableActions;
    let disableLeaveWithoutSaving;
    let hasSavePermission;
    let isEditing;
    let id;
    let fields = [];
    let label;
    let description;
    if ('collection' in props) {
        collection = props?.collection;
        disableActions = props?.disableActions;
        disableLeaveWithoutSaving = props?.disableLeaveWithoutSaving;
        hasSavePermission = props?.hasSavePermission;
        isEditing = props?.isEditing;
        id = props?.id;
        fields = props?.collection?.fields;
    }
    if ('global' in props) {
        global = props?.global;
        fields = props?.global?.fields;
        label = props?.global?.label;
        description = props?.global?.admin?.description;
        hasSavePermission = permissions?.update?.permission;
    }
    return /*#__PURE__*/ _react.default.createElement(_react.Fragment, null, collection && /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        description: t('editing'),
        keywords: `${(0, _getTranslation.getTranslation)(collection.labels.singular, i18n)}, Payload, CMS`,
        title: `${isEditing ? t('editing') : t('creating')} - ${(0, _getTranslation.getTranslation)(collection.labels.singular, i18n)}`
    }), global && /*#__PURE__*/ _react.default.createElement(_Meta.default, {
        description: (0, _getTranslation.getTranslation)(label, i18n),
        keywords: `${(0, _getTranslation.getTranslation)(label, i18n)}, Payload, CMS`,
        title: (0, _getTranslation.getTranslation)(label, i18n)
    }), (collection && !(collection.versions?.drafts && collection.versions?.drafts?.autosave) || global && !(global.versions?.drafts && global.versions?.drafts?.autosave)) && !disableLeaveWithoutSaving && /*#__PURE__*/ _react.default.createElement(_LeaveWithoutSaving.LeaveWithoutSaving, null), /*#__PURE__*/ _react.default.createElement(_SetStepNav.SetStepNav, {
        collection: collection,
        global: global,
        id: id,
        isEditing: isEditing,
        view: t('livePreview')
    }), /*#__PURE__*/ _react.default.createElement(_DocumentControls.DocumentControls, {
        apiURL: apiURL,
        collection: collection,
        data: data,
        disableActions: disableActions,
        global: global,
        hasSavePermission: hasSavePermission,
        id: id,
        isEditing: isEditing,
        permissions: permissions
    }), /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            baseClass,
            previewWindowType === 'popup' && `${baseClass}--detached`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement("div", {
        className: [
            `${baseClass}__main`,
            previewWindowType === 'popup' && `${baseClass}__main--popup-open`
        ].filter(Boolean).join(' ')
    }, /*#__PURE__*/ _react.default.createElement(_DocumentFields.DocumentFields, {
        description: description,
        fieldTypes: fieldTypes,
        fields: fields,
        forceSidebarWrap: true,
        hasSavePermission: hasSavePermission,
        permissions: permissions
    })), /*#__PURE__*/ _react.default.createElement(_Preview.LivePreview, props)));
};
const LivePreviewView = (props)=>{
    const { data } = props;
    const config = (0, _Config.useConfig)();
    const documentInfo = (0, _DocumentInfo.useDocumentInfo)();
    const locale = (0, _Locale.useLocale)();
    const { setViewActions } = (0, _ActionsProvider.useActions)();
    const collection = documentInfo.collection;
    const global = documentInfo.global;
    let livePreviewConfig = config?.admin?.livePreview;
    if ('collection' in props) {
        livePreviewConfig = {
            ...livePreviewConfig || {},
            ...props?.collection.admin.livePreview || {}
        };
    }
    if ('global' in props) {
        livePreviewConfig = {
            ...livePreviewConfig || {},
            ...props?.global.admin.livePreview || {}
        };
    }
    const [url, setURL] = _react.default.useState(()=>{
        if (typeof livePreviewConfig?.url === 'string') return livePreviewConfig?.url;
    });
    (0, _react.useEffect)(()=>{
        const getURL = async ()=>{
            const newURL = typeof livePreviewConfig?.url === 'function' ? await livePreviewConfig.url({
                data,
                documentInfo,
                locale
            }) : livePreviewConfig?.url;
            setURL(newURL);
        };
        getURL() // eslint-disable-line @typescript-eslint/no-floating-promises
        ;
    }, [
        data,
        documentInfo,
        locale,
        livePreviewConfig
    ]);
    (0, _react.useEffect)(()=>{
        const editConfig = (collection || global)?.admin?.components?.views?.Edit;
        const livePreviewActions = editConfig && 'LivePreview' in editConfig && 'actions' in editConfig.LivePreview ? editConfig.LivePreview.actions : [];
        setViewActions(livePreviewActions);
    }, [
        collection,
        global,
        setViewActions
    ]);
    const breakpoints = [
        ...livePreviewConfig?.breakpoints || [],
        {
            name: 'responsive',
            height: '100%',
            label: 'Responsive',
            width: '100%'
        }
    ];
    const { isPopupOpen, openPopupWindow, popupRef } = (0, _usePopupWindow.usePopupWindow)({
        eventType: 'payload-live-preview',
        url
    });
    return /*#__PURE__*/ _react.default.createElement(_Context.LivePreviewProvider, {
        ...props,
        breakpoints: breakpoints,
        isPopupOpen: isPopupOpen,
        openPopupWindow: openPopupWindow,
        popupRef: popupRef,
        url: url
    }, /*#__PURE__*/ _react.default.createElement(PreviewView, props));
};

//# sourceMappingURL=data:application/json;base64,