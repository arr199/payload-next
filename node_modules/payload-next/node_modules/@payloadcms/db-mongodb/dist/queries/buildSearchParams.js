"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "buildSearchParam", {
    enumerable: true,
    get: function() {
        return buildSearchParam;
    }
});
const _bsonobjectid = /*#__PURE__*/ _interop_require_default(require("bson-objectid"));
const _mongoose = /*#__PURE__*/ _interop_require_default(require("mongoose"));
const _database = require("payload/database");
const _types = require("payload/types");
const _operatorMap = require("./operatorMap");
const _sanitizeQueryValue = require("./sanitizeQueryValue");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const subQueryOptions = {
    lean: true,
    limit: 50
};
async function buildSearchParam({ collectionSlug, fields, globalSlug, incomingPath, locale, operator, payload, val }) {
    // Replace GraphQL nested field double underscore formatting
    let sanitizedPath = incomingPath.replace(/__/g, '.');
    if (sanitizedPath === 'id') sanitizedPath = '_id';
    let paths = [];
    let hasCustomID = false;
    if (sanitizedPath === '_id') {
        const customIDfield = payload.collections[collectionSlug]?.config.fields.find((field)=>(0, _types.fieldAffectsData)(field) && field.name === 'id');
        let idFieldType = 'text';
        if (customIDfield) {
            if (customIDfield?.type === 'text' || customIDfield?.type === 'number') {
                idFieldType = customIDfield.type;
            }
            hasCustomID = true;
        }
        paths.push({
            collectionSlug,
            complete: true,
            field: {
                name: 'id',
                type: idFieldType
            },
            path: '_id'
        });
    } else {
        paths = await (0, _database.getLocalizedPaths)({
            collectionSlug,
            fields,
            globalSlug,
            incomingPath: sanitizedPath,
            locale,
            payload
        });
    }
    const [{ field, path }] = paths;
    if (path) {
        const { operator: formattedOperator, val: formattedValue } = (0, _sanitizeQueryValue.sanitizeQueryValue)({
            field,
            hasCustomID,
            operator,
            path,
            val
        });
        // If there are multiple collections to search through,
        // Recursively build up a list of query constraints
        if (paths.length > 1) {
            // Remove top collection and reverse array
            // to work backwards from top
            const pathsToQuery = paths.slice(1).reverse();
            const initialRelationshipQuery = {
                value: {}
            };
            const relationshipQuery = await pathsToQuery.reduce(async (priorQuery, { collectionSlug: slug, path: subPath }, i)=>{
                const priorQueryResult = await priorQuery;
                const SubModel = payload.db.collections[slug];
                // On the "deepest" collection,
                // Search on the value passed through the query
                if (i === 0) {
                    const subQuery = await SubModel.buildQuery({
                        locale,
                        payload,
                        where: {
                            [subPath]: {
                                [formattedOperator]: val
                            }
                        }
                    });
                    const result = await SubModel.find(subQuery, subQueryOptions);
                    const $in = [];
                    result.forEach((doc)=>{
                        const stringID = doc._id.toString();
                        $in.push(stringID);
                        if (_mongoose.default.Types.ObjectId.isValid(stringID)) {
                            $in.push(doc._id);
                        }
                    });
                    if (pathsToQuery.length === 1) {
                        return {
                            path,
                            value: {
                                $in
                            }
                        };
                    }
                    const nextSubPath = pathsToQuery[i + 1].path;
                    return {
                        value: {
                            [nextSubPath]: {
                                $in
                            }
                        }
                    };
                }
                const subQuery = priorQueryResult.value;
                const result = await SubModel.find(subQuery, subQueryOptions);
                const $in = result.map((doc)=>doc._id.toString());
                // If it is the last recursion
                // then pass through the search param
                if (i + 1 === pathsToQuery.length) {
                    return {
                        path,
                        value: {
                            $in
                        }
                    };
                }
                return {
                    value: {
                        _id: {
                            $in
                        }
                    }
                };
            }, Promise.resolve(initialRelationshipQuery));
            return relationshipQuery;
        }
        if (formattedOperator && _types.validOperators.includes(formattedOperator)) {
            const operatorKey = _operatorMap.operatorMap[formattedOperator];
            if (field.type === 'relationship' || field.type === 'upload') {
                let hasNumberIDRelation;
                const result = {
                    value: {
                        $or: [
                            {
                                [path]: {
                                    [operatorKey]: formattedValue
                                }
                            }
                        ]
                    }
                };
                if (typeof formattedValue === 'string') {
                    if (_mongoose.default.Types.ObjectId.isValid(formattedValue)) {
                        result.value.$or.push({
                            [path]: {
                                [operatorKey]: (0, _bsonobjectid.default)(formattedValue)
                            }
                        });
                    } else {
                        (Array.isArray(field.relationTo) ? field.relationTo : [
                            field.relationTo
                        ]).forEach((relationTo)=>{
                            const isRelatedToCustomNumberID = payload.collections[relationTo]?.config?.fields.find((relatedField)=>{
                                return (0, _types.fieldAffectsData)(relatedField) && relatedField.name === 'id' && relatedField.type === 'number';
                            });
                            if (isRelatedToCustomNumberID) {
                                if (isRelatedToCustomNumberID.type === 'number') hasNumberIDRelation = true;
                            }
                        });
                        if (hasNumberIDRelation) result.value.$or.push({
                            [path]: {
                                [operatorKey]: parseFloat(formattedValue)
                            }
                        });
                    }
                }
                if (result.value.$or.length > 1) {
                    return result;
                }
            }
            if (formattedOperator === 'like' && typeof formattedValue === 'string') {
                const words = formattedValue.split(' ');
                const result = {
                    value: {
                        $and: words.map((word)=>({
                                [path]: {
                                    $options: 'i',
                                    $regex: word.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&')
                                }
                            }))
                    }
                };
                return result;
            }
            // Some operators like 'near' need to define a full query
            // so if there is no operator key, just return the value
            if (!operatorKey) {
                return {
                    path,
                    value: formattedValue
                };
            }
            return {
                path,
                value: {
                    [operatorKey]: formattedValue
                }
            };
        }
    }
    return undefined;
}

//# sourceMappingURL=data:application/json;base64,